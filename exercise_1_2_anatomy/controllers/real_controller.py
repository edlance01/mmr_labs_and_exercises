from gui_module.app import app  # Import the Flask app instance from the GUI module
from gui_module.base_controller import (
    BaseController,
)  # Base controller to define GUI logic
from loaders.file_loader_factory import (
    FileLoaderFactory,
)  # Factory for file loaders based on file extension
from retrievers.retriever import (
    Retriever,
)  # Module for interacting with a retrieval system
import os  # Module for interacting with the operating system
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

class RealController(BaseController):
    """
    To use the GUI, you must name your class RealController.

    The RealController class extends BaseController and provides the implementation
    for handling file loading and retrieving responses from the LLM (Large Language Model).
    """

    def __init__(self):
        self.initialize_folders()

    def retrieve_response(self, user_input: str) -> str:
        """
        Process the user input and return a response from the LLM.

        Args:
            user_input (str): The query or input provided by the user.

        Returns:
            str: The response generated by the LLM based on the input.
        """
        return Retriever().run_composite_prompt(
            user_input
        )  # Call the retriever to handle the query

    # TODO //EL if unsupported file, have factory return None, post message to screen
    def load_the_file(self, file_path):
        """
        Load and process a file using the appropriate loader based on its extension.

        Args:
            file_path (str): The full path to the file being loaded.

        Raises:
            ValueError: If no suitable loader is found for the file extension.
        """
        # Determine the loader for the file based on its extension
        file_ext = os.path.splitext(file_path)[1].strip()
        loader = FileLoaderFactory.get_loader(file_ext)

        # Log the start of file processing
        print(f"STARTING LOAD, THE FILE NAME IS: {file_path}")

        # Process the file if a suitable loader is found; otherwise, handle the unsupported file type
        if loader is not None:
            loader.process_file(file_path)  # Call the loader's process_file method
        else:
            raise ValueError(f"Unsupported file type: {os.path.splitext(file_path)[1]}")

    def initialize_folders(self):
        # Get the folder paths from environment variables
        image_output_dir = os.getenv("IMAGE_OUTPUT_DIR")
        input_files = os.getenv("INPUT_FILES")

        # Function to check and create directories if they don't exist
        def create_directory(folder_path):
            path = Path(folder_path)
            if not path.exists():
                path.mkdir(parents=True, exist_ok=True)  # Creates directories and ignores if already exists
                print(f"Folder '{folder_path}' created.")
            else:
                print(f"Folder '{folder_path}' already exists.")

        # Create the folders using the paths from the .env file
        create_directory(image_output_dir)
        create_directory(input_files)

    
    # Call this to start your app; you can set the port here
    if __name__ == "__main__":
        app.run(
            debug=True, port=8081
        )  # Run the Flask app with debugging enabled on port 8081
